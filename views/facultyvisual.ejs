<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Faculty Dashboard</title>

  <script src="https://cdn.anychart.com/releases/8.10.0/js/anychart-bundle.min.js"></script>
  <style>
    .dashboard-container {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 20px;
      padding: 20px;
    }

    .chart-container {
      width: 46.5%;
      background-color: white;
      border-radius: 20px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
      padding: 20px;
      text-align: center;
    }

    .chart-header h2 {
      font-size: 1.8rem;
      color: #333;
    }

    #container {
      width: 100%;
      height: 400px;
    }

    .bell-chart {
      display: flex;
      justify-content: space-around;
      align-items: flex-end;
      height: 300px;
      position: relative;
      margin-top: 20px;
    }

    .bell {
      position: relative;
      width: 80px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .curve {
      width: 100%;
      border-radius: 20px 20px 0 0;
      transition: all 0.3s ease;
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .marker {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 0.9rem;
      font-weight: bold;
      color: white;
      margin-bottom: 10px;
    }

    .x-axis {
      display: flex;
      justify-content: space-around;
      margin-top: 20px;
    }

    .x-axis-item {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-bottom: 6px;
    }

    .tooltip {
      position: absolute;
      background-color: #fff;
      padding: 8px 12px;
      font-size: 0.85rem;
      border-radius: 5px;
      box-shadow: 0 3px 8px rgba(0,0,0,0.15);
      display: none;
      pointer-events: none;
      z-index: 100;
    }

    .line-kpi-section {
    display: flex;
    justify-content: space-between;
    gap: 20px;
    flex-wrap: wrap;
    padding: 20px;
}

.kpi-wrapper {
    width: 46%;
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.kpi-row {
    display: flex;
    justify-content: space-between;
    gap: 20px;
}

.kpi-box {
    background-color: #fff;
    border: 1px solid #ddd;
    padding: 20px;
    width: 48%;
    text-align: center;
    border-radius: 10px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
}

.kpi-box h3 {
    font-size: 1.2rem;
    margin-bottom: 10px;
}

.kpi-box p {
    font-size: 1.5rem;
    font-weight: bold;
}

/* Summary Box under KPI Cards */
.summary-box {
    background-color: #f9f9f9;
    border-left: 5px solid #4CAF50;
    padding: 20px;
    margin-top: 20px;
    border-radius: 10px;
    font-size: 1rem;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
}

.summary-box h3 {
    margin-bottom: 10px;
    color: #333;
}

.summary-box ul {
    list-style: disc;
    margin-left: 20px;
}

/* Chart Section - Positioned Beside the Summary Box */
.chart-column {
    width: 48%;
    background-color: white;
    border-radius: 20px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    padding: 20px;
}
  </style>
</head>
<body>
    <h1>Faculty Dashboard Performance Visualization</h1>
    <div class="line-kpi-section">
        <div class="kpi-wrapper">
            <div class="kpi-row">
                <div class="kpi-box">
                    <h3>Total Students Evaluated</h3>
                    <p><%= totalStudents %></p>
                </div>
                <div class="kpi-box">
                    <h3>Total Skills Evaluated</h3>
                    <p><%= totalSkills %></p>
                </div>
            </div>
            <div class="kpi-row">
                <div class="kpi-box">
                    <h3>Average Completion Rate</h3>
                    <p><%= avgCompletionRate %>%</p>
                </div>
                <div class="kpi-box">
                    <h3>Average Time Taken</h3>
                    <p><%= avgTimeTaken %> minutes</p>
                </div>
            </div>
            
            <!-- Summary Box positioned under KPI Cards -->
            <div class="summary-box" id="summaryBox">
                <h3>Real-time Summary</h3>
                <ul id="summaryList"></ul>
            </div>
        </div>
      
        <!-- Chart Section beside the Summary Box -->
        <div class="chart-column">
            <div class="chart-header">
                <h2>Time Progression Across Sessions</h2>
            </div>
            <div id="timeProgressionContainer" style="width: 100%; height: 500px;"></div>
        </div>
    </div>
    
      
   
    <div class="dashboard-container">
        <!-- Boxplot for Skill Time Distribution -->
        <div class="chart-container">
          <div class="chart-header">
            <h2>Time Distribution Across Skills</h2>
          </div>
          <div id="container"></div>
        </div>
    
        <!-- Bell Chart for Skill Completion Percentage -->
        <div class="chart-container">
          <div class="chart-header">
            <h2>Skill-wise Completion %</h2>
          </div>
          <div class="bell-chart" id="bellChart"></div>
          <div class="x-axis" id="xAxis"></div>
          <div class="tooltip" id="tooltip"></div>
        </div>
      </div>
  
  

  <script>
    const chartData = <%- chartData %>; 
    let completionRate = <%- completionRate %>;
    let totalStudents = <%- totalStudents %>;
    let totalSkills = <%- totalSkills %>;
    let avgCompletionRate = <%- avgCompletionRate %>;
    let avgTimeTaken = <%- avgTimeTaken %>;
    
    console.log("chartData", chartData);
    console.log("Completion Rate: ", completionRate);


    // Safeguard for completionRate
    if (Array.isArray(completionRate)) {
      // Process chartData to calculate time-based statistics
      const skillTimesMap = {};
      chartData.forEach(entry => {
        const skill = entry.skill_id;
        const time = parseFloat(entry.total_time);
        if (!skillTimesMap[skill]) {
          skillTimesMap[skill] = [];
        }
        skillTimesMap[skill].push(time);
      });

      function getBoxStats(times) {
        // Sort times in ascending order
        times.sort((a, b) => a - b);

        const n = times.length;
        const min = times[0];
        const max = times[n - 1];

        // Median calculation
        const median = (n % 2 === 0) ? (times[n / 2 - 1] + times[n / 2]) / 2 : times[Math.floor(n / 2)];

        // Quartile calculations
        const q1 = times[Math.floor(n / 4)];
        const q3 = times[Math.floor(3 * n / 4)];

        // Return the stats in the format that your chart needs
        return {
          low: min,
          q1: q1,
          median: median,
          q3: q3,
          high: max
        };
      }

      // Format boxplot data
      const boxplotData = Object.entries(skillTimesMap).map(([skill_id, times]) => {
        const stats = getBoxStats(times);
        return {
          x: "Skill " + skill_id,
          ...stats
        };
      });

      // Create Boxplot Chart
      anychart.onDocumentReady(function () {
        const chart = anychart.box();
        chart.data(boxplotData);
        chart.title("Time Distribution Across Skills");
        chart.yAxis().title("Time Taken (seconds)");
        chart.xAxis().title("Skills Name");
        chart.container('container');
        chart.draw();
      });

      // Calculate completion percentage and transform the completionRate
      const sessionCount = 5;  // Adjust this based on your total sessions

      const skillSessionCounts = {};

      // Process chartData to calculate completion rates
      chartData.forEach(entry => {
        const skill_id = entry.skill_id;
        if (!skillSessionCounts[skill_id]) {
          skillSessionCounts[skill_id] = 0;
        }
        if (parseFloat(entry.total_time) > 0) {  // Assuming non-zero time means completed session
          skillSessionCounts[skill_id]++;
        }
      });

      // Calculate completion percentage
      completionRate = Object.keys(skillSessionCounts).map(skill_id => {
        const completedSessions = skillSessionCounts[skill_id];
        return {
          skill_id: skill_id,
          completion_percentage: ((completedSessions / sessionCount) * 100).toFixed(1)
        };
      });

      // Bell Chart for Completion % Visualization
      const bellChart = document.getElementById('bellChart');
      const xAxis = document.getElementById('xAxis');
      const tooltip = document.getElementById('tooltip');

      const colors = [
        '#7BC6CC', '#A5D8DD', '#8ED1FC', '#C4E3E6',
        '#D6F5F2', '#9BD9D9', '#A4E0EB', '#ADE6E6'
      ];

      completionRate.forEach((entry, i) => {
        const percentage = entry.completion_percentage;
        const color = colors[i % colors.length];

        const bell = document.createElement('div');
        bell.className = 'bell';

        const marker = document.createElement('div');
        marker.className = 'marker';
        marker.style.backgroundColor = color;
        marker.textContent = `${percentage}%`;

        const curve = document.createElement('div');
        curve.className = 'curve';
        curve.style.backgroundColor = color;
        curve.style.height = `${percentage * 2.5}px`; // scale % to px (max height ~250)

        bell.appendChild(marker);
        bell.appendChild(curve);
        bellChart.appendChild(bell);

        const xItem = document.createElement('div');
        xItem.className = 'x-axis-item';
        const dot = document.createElement('div');
        dot.className = 'dot';
        dot.style.backgroundColor = color;
        const label = document.createElement('p');
        label.textContent = `Skill ${entry.skill_id}`;

        xItem.appendChild(dot);
        xItem.appendChild(label);
        xAxis.appendChild(xItem);

        bell.addEventListener('mouseenter', () => {
          tooltip.innerHTML = `<strong>Skill ${entry.skill_id}</strong>: ${percentage}% completed`;
          tooltip.style.display = 'block';
          tooltip.style.left = `${bell.getBoundingClientRect().left + window.scrollX}px`;
          tooltip.style.top = `${bell.getBoundingClientRect().top + window.scrollY - 40}px`;
        });

        bell.addEventListener('mouseleave', () => {
          tooltip.style.display = 'none';
        });
      });
    } else {
      console.error("completionRate is not an array", completionRate);
    }

    // Time Progression Chart
    anychart.onDocumentReady(function () {
  const chart = anychart.line();
  chart.title("Time Progression Across Sessions");
  chart.yAxis().title("Total Time (minutes)");
  chart.xAxis().title("Session Number");
  chart.crosshair(true);
  chart.legend(true);

  const sessionSkillMap = {};
chartData.forEach(entry => {
  const session = entry.session_no;
  const skill = "Skill " + entry.skill_id;
  const time = parseFloat(entry.total_time); // ✅ fixed here

  if (!isNaN(time)) {
    if (!sessionSkillMap[skill]) sessionSkillMap[skill] = [];
    sessionSkillMap[skill].push([session, time]);
  }
});


  // For each skill, create a line series
  Object.keys(sessionSkillMap).forEach(skill => {
    const series = chart.line(sessionSkillMap[skill]);
    series.name(skill);
    series.tooltip().format(`${skill}: {%value} mins`);
  });

  chart.container("timeProgressionContainer");
  chart.draw();
});
// Generate dynamic summary
function generateSummary(chartData, completionRate) {
  const skillTimeAverages = {};
  const skillSessionCounts = {};

  chartData.forEach(entry => {
    const skill = `Skill ${entry.skill_id}`;
    const time = parseFloat(entry.total_time);

    if (!skillTimeAverages[skill]) {
      skillTimeAverages[skill] = 0;
      skillSessionCounts[skill] = 0;
    }

    if (!isNaN(time)) {
      skillTimeAverages[skill] += time;
      skillSessionCounts[skill]++;
    }
  });

  const averageTimes = Object.entries(skillTimeAverages).map(([skill, totalTime]) => {
    const avg = (totalTime / skillSessionCounts[skill]).toFixed(2);
    return { skill, avg: parseFloat(avg) };
  });

  averageTimes.sort((a, b) => b.avg - a.avg); // Descending by avg time

  const lowestCompletion = [...completionRate].sort((a, b) => a.completion_percentage - b.completion_percentage)[0];

  const summaryList = document.getElementById('summaryList');
  summaryList.innerHTML = `
    <li><strong>Skill with Highest Average Time:</strong> ${averageTimes[0].skill} (${averageTimes[0].avg} mins)</li>
    <li><strong>Skill with Lowest Completion Rate:</strong> Skill ${lowestCompletion.skill_id} (${lowestCompletion.completion_percentage}%)</li>
    <li><strong>Total Evaluated Entries:</strong> ${chartData.length}</li>
  `;
}

generateSummary(chartData, completionRate);

  </script>

</body>
</html>
